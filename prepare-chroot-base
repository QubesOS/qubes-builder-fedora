#!/bin/bash
# vim: set ts=4 sw=4 sts=4 et :

set -e
if [ "${VERBOSE:-0}" -ge 2 ] || [ "${DEBUG:-0}" -eq 1 ]; then
    set -x
else
    YUM_OPTS="$YUM_OPTS -q"
fi

set -o pipefail
rpm_version=$(rpm --version)
if ! [[ "$rpm_version" =~ ^RPM\ version\ ([0-9][0-9.]*)$ ]]; then
    echo 'Bad RPM version' >&2
    exit 1
fi
version=$(printf '%s\n4.14.2.0\n' "${BASH_REMATCH[1]}"|sort -V)
if [[ "$version" = 4.14.2.0 ]]; then
    echo 'Sorry, your RPM version is too old (need at least 4.14.2.1)'>&2
    exit 1
fi

PLUGIN_DIR=$(dirname "$0")

INSTALLDIR=$1
DIST=$2

DOWNLOADDIR="$(readlink -f "${CACHEDIR}"/base_rpms)"

YUM=(dnf)

if [ "${DIST#fc}" != "${DIST}" ]; then
    DISTRIBUTION="fedora"
    DIST_VER="${DIST#fc}"
fi

if [ "${DIST#centos}" != "${DIST}" ]; then
    DISTRIBUTION="centos"
    DIST_VER="${DIST#centos}"
fi

if [ "$DIST" = "tumbleweed" ] || [ "$DIST" = "leap" ]; then
    DISTRIBUTION="opensuse"
    DIST_VER="$DIST"
    # using DNF from the outside makes using expected path from inside chroot
    # to the builder host so ensure it has the key at the expected location.
    if ! [ -e /etc/pki/rpm-gpg/RPM-GPG-KEY-openSUSE ]  && [ -e /usr/share/distribution-gpg-keys/opensuse/RPM-GPG-KEY-openSUSE ]; then
        ln -s /usr/share/distribution-gpg-keys/opensuse/RPM-GPG-KEY-openSUSE /etc/pki/rpm-gpg/
    fi
fi

if [ -e "${PLUGIN_DIR}/yum-bootstrap-${DISTRIBUTION}-${DIST_VER}.conf" ]; then
    YUM_BOOTSTRAP_CONF=yum-bootstrap-${DISTRIBUTION}-${DIST_VER}.conf
else
    YUM_BOOTSTRAP_CONF=yum-bootstrap-${DISTRIBUTION}.conf
fi

case ${YUM[0]} in
(dnf)
    YUM+=($YUM_OPTS --releasever "$DIST_VER" "--downloaddir=$DOWNLOADDIR" --downloadonly install)
    ;;
(*)
    echo "DNF is missing, fallback to YUM is no longer supported, please install DNF" >&2
    exit 1
    ;;
esac

if ! [ -f "${INSTALLDIR}/tmp/.prepared_base" ]; then
    echo "-> Initializing RPM database..."
    # We ALWAYS ALWAYS ALWAYS want signature checks.
    RPM_OPTS=('--define=_pkgverify_level all')
    # Delta RPMs and zchunk are unnecessary attack surface
    YUM_OPTS=(--setopt=deltarpm=False --setopt=deltarpm_percentage=0 --setopt=zchunk=0)
    # Debian by default keep rpmdb in ~/.rpmdb
    # OpenSUSE by default keep rpmdb in /usr/lib/sysimage/rpm
    RPM_OPTS+=("--define=_dbpath %{_var}/lib/rpm")
    if grep -q openSUSE /etc/os-release; then
        # Since OpenSUSE enable gpgcheck by default, make it find the keys
        mkdir -p "${INSTALLDIR}/usr/lib/sysimage"
        ln -ns ../../../var/lib/rpm "${INSTALLDIR}/usr/lib/sysimage/rpm"
    fi
    rpm "${RPM_OPTS[@]}" --initdb --root="${INSTALLDIR}"

    if [ "${DISTRIBUTION}" = "fedora" ]; then
        rpm "${RPM_OPTS[@]}" --import --root="${INSTALLDIR}" -- \
            "${PLUGIN_DIR}/keys/RPM-GPG-KEY-fedora-${DIST_VER}-primary"
    fi

    if [ "${DISTRIBUTION}" = "centos" ]; then
        rpm "${RPM_OPTS[@]}" --import --root="${INSTALLDIR}" -- \
            "${PLUGIN_DIR}/keys/RPM-GPG-KEY-CentOS-${DIST_VER}"\
            "${PLUGIN_DIR}/keys/RPM-GPG-KEY-EPEL-${DIST_VER}"
    fi

    if [ "${DISTRIBUTION}" = "opensuse" ]; then
        rpm "${RPM_OPTS[@]}" --import --root="${INSTALLDIR}" -- \
            "${PLUGIN_DIR}/keys/RPM-GPG-KEY-openSUSE"
    fi

    echo "-> Retrieving core RPM packages..."

    if [ "${DISTRIBUTION}" = "fedora" ]; then
        INITIAL_PACKAGES=(filesystem setup fedora-release dnf dnf-plugins-core)
        if [ "${DIST_VER}" -ge 25 ]; then
            # avoid pulling in glibc-all-langpacks to save space
            INITIAL_PACKAGES+=(glibc-langpack-en)
        fi
        if [ "${DIST_VER}" -eq 25 ]; then
            # libcrypt conflicts with libcrypt-nss and yumdownloader is stupid
            # enough to try them both
            INITIAL_PACKAGES=(--exclude=libcrypt "${INITIAL_PACKAGES[@]}")
        fi

        if [ "${DIST_VER}" -ge 26 ]; then
            # coreutils conflicts with coreutils-single
            INITIAL_PACKAGES=(--exclude=coreutils-single "${INITIAL_PACKAGES[@]}")
        fi

        if [ "${DIST_VER}" -ge 27 ]; then
            # curl-minimal conflicts with curl, same for libcurl
            INITIAL_PACKAGES=(--exclude=curl --exclude=libcurl "${INITIAL_PACKAGES[@]}")
        fi

        mkdir -p -- "${DOWNLOADDIR}"
        yumconf=$(mktemp)

        if [ "x${FEDORA_MIRROR}" != "x" ]; then
            awk '
            BEGIN {
                mirror=ARGV[1];     delete ARGV[1];
                releasever=ARGV[2]; delete ARGV[2];
            }
            {
                gsub("^metalink", "#metalink");
                gsub("^#baseurl=.*/(linux|fedora)/", "baseurl=" mirror "/");
                gsub("\\$releasever", releasever);
                print;
            }' "${FEDORA_MIRROR%/}" "${DIST_VER}" \
                < "${PLUGIN_DIR}/${YUM_BOOTSTRAP_CONF}" \
                > "$yumconf"
        else
            sed -e "s/\\\$releasever/${DIST_VER}/g" \
                -e "s#\\\$plugindir#${PLUGIN_DIR}#g" \
                < "${PLUGIN_DIR}/${YUM_BOOTSTRAP_CONF}" \
                > "$yumconf"
        fi
    fi

    if [ "${DISTRIBUTION}" = "centos" ]; then
        INITIAL_PACKAGES=(filesystem setup epel-release)
        if [ "$DIST_VER" = "7" ]; then
            INITIAL_PACKAGES+=(centos-release yum yum-utils yum-plugin-copr centos-release-xen-412)
        else
            # coreutils conflicts with coreutils-single
            INITIAL_PACKAGES=(--exclude=coreutils-single "${INITIAL_PACKAGES[@]}")
            INITIAL_PACKAGES+=(centos-stream-release centos-stream-repos dnf dnf-plugins-core)
        fi

        # Add groupadd, su etc.
        INITIAL_PACKAGES+=(shadow-utils util-linux)

        mkdir -p -- "${DOWNLOADDIR}"
        yumconf=$(mktemp)
        yumconftmp=$(mktemp)

        sed -e "s/\\\$releasever/${DIST_VER}/g" \
            < "${PLUGIN_DIR}/${YUM_BOOTSTRAP_CONF}" \
            > "$yumconf"

        if [ "x${CENTOS_MIRROR}" != "x" ]; then
            awk '
            BEGIN {
                mirror=ARGV[1];     delete ARGV[1];
            }
            {
                gsub("^mirrorlist", "#mirrorlist");
                gsub("^#baseurl=.*/(centos|CentOS)/", "baseurl=" mirror "/");
                print;
            }' "${CENTOS_MIRROR%/}" \
                < "$yumconf" \
                > "$yumconftmp"
            mv "$yumconftmp" "$yumconf"
        fi

        if [ "x${EPEL_MIRROR}" != "x" ]; then
            awk '
            BEGIN {
                mirror=ARGV[1];     delete ARGV[1];
            }
            {
                gsub("^metalink", "#metalink");
                gsub("^#baseurl=.*/epel/", "baseurl=" mirror "/");
                print;
            }' "${EPEL_MIRROR%/}" \
                < "$yumconf" \
                > "$yumconftmp"
            mv "$yumconftmp" "$yumconf"
        fi
    fi

    if [ "${DISTRIBUTION}" = "opensuse" ]; then
        INITIAL_PACKAGES=(filesystem rpm-repos-openSUSE-Tumbleweed dnf dnf-plugins-core)

        # Add groupadd, su etc.
        INITIAL_PACKAGES+=(shadow util-linux coreutils ca-certificates-cacert ca-certificates-mozilla)
        INITIAL_PACKAGES+=(--exclude=busybox*)

        mkdir -p -- "${DOWNLOADDIR}"
        yumconf=$(mktemp)

        sed -e "s/\\\$releasever/${DIST_VER}/g" \
            < "${PLUGIN_DIR}/${YUM_BOOTSTRAP_CONF}" \
            > "$yumconf"
    fi

    "${YUM[@]}" "${YUM_OPTS[@]}" -c "$yumconf" -y \
        --installroot="${INSTALLDIR}" "${INITIAL_PACKAGES[@]}"
    rm -f "$yumconf"

    echo "-> Verifying signatures..."
    set +x
    for file in "${DOWNLOADDIR}"/*; do
        result=$(rpmkeys "${RPM_OPTS[@]}" --root="${INSTALLDIR}" --checksig -- "${file}") || {
            echo "Filename: ${file} failed verification.  Exiting!"
            exit 1
        }
        [[ "$result" = "$file: digests signatures OK" ]] || {
            echo "Filename: ${file} is not signed.  Exiting!"
            exit 1
        }
    done

    echo "-> Printing hashes of downloaded packages:"
    sha256sum "${DOWNLOADDIR}/"*.rpm
    if [ "${VERBOSE:-0}" -ge 2 ] || [ "${DEBUG:-0}" -eq 1 ]; then
        set -x
    fi

    # Prepare /dev nodes
    mkdir -p "${INSTALLDIR}/dev/"
    for f in null urandom zero random console; do
        cp -a "/dev/$f" "$INSTALLDIR/dev/" || true
    done

    # Create loop devices as much as Mock does
    mknod -m 0666 "$INSTALLDIR/dev/loop-control" c 10 237

    for i in $(seq 0 8)
    do
        mknod -m 0666 "$INSTALLDIR/dev/loop$i" b 7 "$i"
    done

    # openSUSE: some complains a lot about missing /proc
    if [ "${DISTRIBUTION}" = "opensuse" ]; then
        if ! [ -r "$INSTALLDIR/proc/cpuinfo" ]; then
            mkdir -p "$INSTALLDIR/proc"
            mount -t proc proc "$INSTALLDIR/proc"
        fi
    fi

    echo "-> Installing core RPM packages..."
    rpm "${RPM_OPTS[@]}" -U --replacepkgs --root="${INSTALLDIR}" -- "${DOWNLOADDIR}/"*.rpm || exit 1
fi

# this part is executed also when updating chroot

if [ "${DISTRIBUTION}" = "fedora" ]; then
    if [ -e "${PLUGIN_DIR}/repos/fedora-${DIST_VER}.repo" ]; then
        # override fedora repo files, in a way that prevents an updated
        # package restoring them
        for f in "${INSTALLDIR}/etc/yum.repos.d/"fedora*.repo; do
            echo "# this file is intentionally cleared" > "$f"
        done
        cp -f "${PLUGIN_DIR}/repos/fedora-${DIST_VER}.repo" "${INSTALLDIR}/etc/yum.repos.d/"
        cp -f "${PLUGIN_DIR}/repos/fedora-${DIST_VER}"*.metalink "${INSTALLDIR}/etc/yum.repos.d/"
    fi
fi

if [ "${DISTRIBUTION}" = "centos" ]; then
    if [ "${DIST_VER}" = "8" ]; then
        sed -i "s/enabled=0/enabled=1/g" "${INSTALLDIR}/etc/yum.repos.d/CentOS-Stream-PowerTools.repo"
    fi
fi

if [ "${DISTRIBUTION}" = "opensuse" ]; then
    chmod 4755 "${INSTALLDIR}/usr/bin/mount"
    chmod 4755 "${INSTALLDIR}/usr/bin/umount"
    chmod 2755 "${INSTALLDIR}/usr/bin/wall"
    chmod 2755 "${INSTALLDIR}/usr/bin/write"
    chmod 4755 "${INSTALLDIR}/usr/bin/su"

    if [ -r "$INSTALLDIR/proc/cpuinfo" ]; then
        umount "$INSTALLDIR/proc"
    fi
fi
touch "${INSTALLDIR}/tmp/.prepared_base"
